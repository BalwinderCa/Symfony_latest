<?php

// src/Repository/StatusRepository.php

namespace App\AppBundle\Repository;

use App\AppBundle\Entity\Status;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * StatusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatusRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Status::class);
    }

    /**
     * Returns the number of Status rows where review is false.
     *
     * @return int The number of rows
     */
    public function countAll(): int
    {
        $queryBuilder = $this->createQueryBuilder('s')
                             ->select('count(s)')
                             ->where('s.review = false');

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns the number of Status rows based on the type.
     *
     * @param string $type The type of Status to filter
     * @return int The number of rows
     */
    public function countByType(string $type): int
    {
        $queryBuilder = $this->createQueryBuilder('s')
                             ->select('count(s)')
                             ->where('s.type LIKE :type')
                             ->setParameter('type', $type);

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns the number of Status rows where review is true.
     *
     * @return int The number of rows
     */
    public function countReview(): int
    {
        $queryBuilder = $this->createQueryBuilder('s')
                             ->select('count(s)')
                             ->where('s.review = true');

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns the sum of the download counts for all Status rows.
     *
     * @return int The sum of downloads
     */
    public function countDownloads(): int
    {
        $queryBuilder = $this->createQueryBuilder('s')
                             ->select('sum(s.downloads)');

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns the sum of the view counts for all Status rows.
     *
     * @return int The sum of views
     */
    public function countViews(): int
    {
        $queryBuilder = $this->createQueryBuilder('s')
                             ->select('sum(s.views)');

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }
}
